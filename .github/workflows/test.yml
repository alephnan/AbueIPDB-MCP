name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  ABUSEIPDB_API_KEY: ${{ secrets.ABUSEIPDB_API_KEY_TEST }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    name: Test Python ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run unit tests
      run: |
        pytest tests/ \
          --cov=mcp_abuseipdb \
          --cov-report=xml \
          --cov-report=term-missing \
          --ignore=tests/test_docker.py \
          --ignore=tests/test_integration.py \
          -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v
      env:
        ABUSEIPDB_API_KEY: mock_key_for_testing

  docker-test:
    runs-on: ubuntu-latest
    name: Docker Tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t mcp-abuseipdb-test .

    - name: Set up Python for test runner
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest

    - name: Run Docker tests
      run: |
        pytest tests/test_docker.py -v

  package-test:
    runs-on: ubuntu-latest
    name: Package Installation Test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Test package installation
      run: |
        python -m pip install --upgrade pip
        pip install build
        python -m build
        pip install dist/*.whl

    - name: Test package import
      run: |
        python -c "import mcp_abuseipdb; print('Package imported successfully')"

    - name: Test CLI entry point
      run: |
        python -c "
        try:
            from mcp_abuseipdb.server import main
            print('CLI entry point accessible')
        except ImportError as e:
            print(f'CLI import failed: {e}')
            exit(1)
        "
      env:
        ABUSEIPDB_API_KEY: test_key

  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Analysis

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-audit
      run: pip install pip-audit

    - name: Install project dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run pip-audit
      run: pip-audit

  performance-test:
    runs-on: ubuntu-latest
    name: Performance Tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        pytest tests/ -k "benchmark" --benchmark-only --benchmark-json=benchmark.json -v
      continue-on-error: true

    - name: Upload benchmark results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json